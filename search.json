[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IfcOpenHouse",
    "section": "",
    "text": "More than 10 years ago, the original IfcOpenHouse 🏠 was created by Thomas Krijnen by using the IfcOpenShell library 🐚. It consists of a single story building with a gable roof, sitting on top of a NURBS surface ⛰️. It includes a footing 🦶, walls 🧱🧱 with openings 🕳️ for doors 🚪 and windows 🪟, a roof 🛖… but above all, it gives an overview about how to programmatically build a simple IFC model from scratch 👩🏽‍💻.\nNavigate through the following preview for yourself. Double click 🖱️ an element to gather entity info from the underlying IFC:\nCheck out the original blog post, as well as the C++ source if interested:\nhttp://blog.ifcopenshell.org/2012/11/say-hi-to-ifcopenhouse.html\nhttps://github.com/IfcOpenShell/IfcOpenShell/blob/master/src/examples/IfcOpenHouse.cpp\nThe current repository is an exercise to recreate that same model, but with the recent higher level IfcOpenShell Python API 🐚🐍. This same API is widely used today in the native IFC editing approach followed by BIM authoring software like BlenderBIM and FreeCAD, among others. At the end, there’s also a visualization cell with IFC.js, the BIM toolkit 🛠️ for JavaScript.\nIt is a basic tutorial, but some basic IFC and Python knowledge is required, as well as some basic trigonometry for the sizes and coordinates 👩‍🎓. One of the goals is to show how powerful Jupyter 🪐 Notebooks 📒 can be 💪 as an experimentation playground. Note that this notebook uses nbdev directives to automate the production of a script and a Quarto website, as well as helping with Git-friendly Jupyter."
  },
  {
    "objectID": "index.html#getting-started-local-installation",
    "href": "index.html#getting-started-local-installation",
    "title": "IfcOpenHouse",
    "section": "Getting started / local installation",
    "text": "Getting started / local installation\nThese set of notebooks 📒 may be conveniently browsed through their Quarto website 🌎, or alternatively be run on your own end by cloning the repository. For the former, refer to the following section. For the latter, follow these installation instructions 📝.\nYou’ll need Mambaforge 🐍 installed in case you don’t have it already. Then, you may run the following commands to clone the repository and install all necessary dependencies ✅.\ngit clone https://github.com/cvillagrasa/IfcOpenHouse.git\nmamba env create --file environment.yml\nconda activate IfcOpenHouse\npip install -e .\nUsing the editable flag -e, you will be able to use any further changes you make to the notebooks and/or Python modules immediately.\nAs an extra step, use dark mode 🕵️‍♂️ if you wish (see jupyter-themes for more info):\njt -t chesterish -T -N -kl\nYou may now launch the Jupyter 🪐 Notebook 📒 dashboard:\njupyter notebook\nAnd that’s it! you are now ready to locally open the notebook nbs/00_generation.ipynb and start having fun 🥳.\nLastly, you may also want to edit the JavaScript code 👩🏽‍💻 for the model preview by running npm i from the viz directory, and regenerating the bundle with npm run build_nb."
  },
  {
    "objectID": "index.html#step-by-step-tutorial-online",
    "href": "index.html#step-by-step-tutorial-online",
    "title": "IfcOpenHouse",
    "section": "Step-by-step tutorial / online",
    "text": "Step-by-step tutorial / online\nAlternatively, you may just start by browsing the contents firstly, and perhaps attempt to run it locally later. Just go to generation and you’ll find an IfcOpenHouse generation online walkthrough 🚀🚀🚀."
  },
  {
    "objectID": "generation.html",
    "href": "generation.html",
    "title": "Step-by-step tutorial",
    "section": "",
    "text": "Welcome to this step-by-step tutorial on how to build a parametric house 🏠 from scratch in IFC with IfcOpenShell 🐚. Before getting started, you may want to pass by the home page, in case you still haven’t. There, you’ll find a general description about the tools 🛠️ being used, installation instructions, as well as links to the original IfcOpenHouse project in C++, by Thomas Krijnen.\nNote that this is a static website version of a Jupyter 🪐 Notebook 📒, optimized for readability and ease of access. If you wish to run the code, refer to the notebook itself, or alternatively you can always clone the repository.\nThis project relies on nbdev to fully integrate code and documentation from inside Jupyter Notebooks. However, if notebooks are not your thing and you just prefer pure Python 🐍, there’s also an autogenerated script.\nLastly, you may want to play a bit and navigate through the IFC.js preview of the house above these lines. Double click an element to gather entity info from the underlying IFC. Throughout this tutorial, you’ll learn how to create each one of those elements and produce a valid IFC 🚀."
  },
  {
    "objectID": "generation.html#necessary-imports",
    "href": "generation.html#necessary-imports",
    "title": "Step-by-step tutorial",
    "section": "Necessary imports",
    "text": "Necessary imports\nThe following commands import most of the necessary libraries 📚 for this project. There’s also an ios_utils module with some code placed into a separate *.py file, so as to focus on the important bits within this notebook. Feel free to also consult its content as an extra task, if desired. Open Cascade is not imported by default, since its usage will depend on the chosen method for the terrain creation.\n\nimport sys\nfrom pathlib import Path\nfrom collections import defaultdict\nfrom mathutils import Vector\nimport numpy as np\nimport ifcopenshell\nimport ifcopenshell.api\nimport ifcopenshell.api.owner\nimport ifcopenshell.api.owner.settings\nimport ifcopenshell.api.material\nimport ifcopenshell.api.geometry\nimport ifcopenshell.validate\n\nfrom IfcOpenHouse.ios_utils import (\n    IfcOpenShellPythonAPI, placement_matrix, clipping, ColourRGB, TerrainBuildMethod, \n    build_native_bspline_terrain, build_tesselated_occ_terrain, ios_entity_overwrite_hook\n)\n\nNo stream support: No module named 'lark'"
  },
  {
    "objectID": "generation.html#definition-of-project-data",
    "href": "generation.html#definition-of-project-data",
    "title": "Step-by-step tutorial",
    "section": "Definition of project data",
    "text": "Definition of project data\nThe following information defines input data for the house creation. Note that it can be modified conveniently to parametrically reconstruct our IFC model. After such modification, remember to run again 🏃‍♀️🏃 any cell depending on the modified parameters.\nFurthermore, without requiring any action from your side, any IFC-related overwritten variable will be automatically garbage-collected 🗑️ by means of an audit hook (see next section).\n\n# Data definition\nproject_name = 'IFC Open House'\nauthor_details = {'given_name': 'Carlos', 'family_name': 'V', 'identification': 'CV'}\nauthor_role = 'CIVILENGINEER'\norganization_details = {'name': 'OSArch', 'identification': 'OSArch'}\nsite_name, building_name, storey_name = 'OSArch Land', 'Open house', 'Ground floor'\n\n# All dimensions in meters\nstorey_size = Vector([10., 5., 3.])\nwall_thickness = 0.36\nfooting_ledge = 0.05\nfooting_size = Vector([\n    storey_size.x + 2 * (wall_thickness + footing_ledge),\n    storey_size.y + 2 * (wall_thickness + footing_ledge),\n    2.\n])\nroof_ledge = Vector([0.1, 0.22])\nroof_thickness = 0.36\nroof_angle = 45. # degrees\nroof_angle_sin = float(np.sin(roof_angle * np.pi/180))\nroof_angle_cos = float(np.cos(roof_angle * np.pi/180))\nroof_height = float(\n    (storey_size.y / 2 + wall_thickness + roof_ledge.y) * np.tan(roof_angle * np.pi / 180)\n)\nroof_size = Vector([\n    storey_size.x + 2 * (wall_thickness + roof_ledge.x),\n    storey_size.y + 2 * (wall_thickness + roof_ledge.y),\n    roof_height\n])\ndoor_horizontal_offset = 1.6\nwindow_base_height = 0.4\nright_window_horizontal_offset = 2.\nstair_width = 1.2\n\n# Colours for surface styles\nwall_colour = ColourRGB(.75, 0.73, 0.68)\nfooting_colour = ColourRGB(.38, 0.4, 0.42)\nroof_colour = ColourRGB(.24, 0.08, 0.04)\nterrain_colour = ColourRGB(.15, 0.25, 0.05)\ndoor_colour = ColourRGB(.8, .8, .8)\nwindow_colour = ColourRGB(.5, 0.4, 0.3, transparency=0.8)\nstair_colour = ColourRGB(.45, 0.47, 0.56)\n\n# Choice of terrain building method. Use NONE if unsure about the viewer capabilities.   \nterrain_build_method = TerrainBuildMethod.TESSELATE_OCC_SHAPE\n\n# Door and window geometric info is defined in a separate file due to its complexity\nfrom IfcOpenHouse.opening_data import door_params, single_window_params, triple_window_params"
  },
  {
    "objectID": "generation.html#setting-up-a-project",
    "href": "generation.html#setting-up-a-project",
    "title": "Step-by-step tutorial",
    "section": "Setting up a project",
    "text": "Setting up a project\nEverything is ready to start using IfcOpenShell 🐚. So without further ado, let’s get down to business 👩‍🏭:\n\n# Little trickery to ease the use of the ifcopenshell.api when scripting\nios = IfcOpenShellPythonAPI()  #q1: thoughts about a data-scientish \"import ifcopenshell.api as ios\"?\n\n# standard use      -&gt; ifcopenshell.api.run('root.create_entity', file, ifc_class='IfcWall')\n# with the trickery -&gt; ios.root.create_entity(file, ifc_class='IfcWall')\n\n# It will reduce the overall string overhead, as well as the length of the API calls\n# However, it will not help with static typing autocomplete and help\n# Bear in mind that currently, this is not a canonical use of IfcOpenShell\n\n\n# Setting up the project\nfile = ios.project.create_file(version='IFC4')\n# Don't use 2X3 in 2023! It's terribly outdated and lacks many useful classes. This simple\n# project uses many &gt;=IFC4 features, and hence selecting 'IFC2X3' here would only lead to issues.\n# Pending to use 4x3 (much better docs) when ios defaults to IFC4X3_TC1 and IFC.js supports it\n\nproject = ios.root.create_entity(file, ifc_class='IfcProject', name=project_name)\nios.project.assign_declaration(file, definition=project, relating_context=project)  #q2: from my ignorance, is this necessary?\nios.unit.assign_unit(\n    file, length={'is_metric': True, 'raw': 'METERS'}, area={'is_metric': True, 'raw': 'METERS'},\n    volume={'is_metric': True, 'raw': 'METERS'}\n)\nctx = ios.context.add_context(file, context_type='Model')\nbody = ios.context.add_context(  #q3: isn't this screaming for \"context.add_subcontext\"? also, context_type may be redundant\n    file, context_type='Model', context_identifier='Body', target_view='MODEL_VIEW', parent=ctx\n)\n\n# We allow for live overwriting of IfcOpenShell entities within the notebook environment\n# Only use this sorcery when experimenting in Jupyter Notebooks, never in production\nsys.addaudithook(\n    ios_entity_overwrite_hook(file, sys.modules[__name__], do_not_delete=[project, ctx, body])\n)\n\nOk, we just got started! The file object 📁 we just created will be the main binding agent for the rest of the notebook. As it can be seen, most API calls are self-explanatory. In order to look up for the most updated documentation, check out the following links:\nhttps://blenderbim.org/docs-python/autoapi/ifcopenshell/api/index.html\nhttps://blenderbim.org/docs-python/ifcopenshell-python/code_examples.html\nIn case you might also want to have a look at the Python source code, this is the place to go:\nhttps://github.com/IfcOpenShell/IfcOpenShell/tree/v0.7.0/src/ifcopenshell-python/ifcopenshell/api"
  },
  {
    "objectID": "generation.html#optional-definition-of-owner-data",
    "href": "generation.html#optional-definition-of-owner-data",
    "title": "Step-by-step tutorial",
    "section": "Optional definition of owner data",
    "text": "Optional definition of owner data\nIFCs can hold data from stakeholders, like a person 🤓 or an organisation 👥. With the last two lines, we’re assigning the user here defined to the rest of the IfcOpenShell API actions taken from now on, as well as IfcOpenShell as the application.\n\napplication = ios.owner.add_application(file)\nperson = ios.owner.add_person(file, **author_details)\norganisation = ios.owner.add_organisation(file, **organization_details)\nuser = ios.owner.add_person_and_organisation(file, person=person, organisation=organisation)\nios.owner.add_role(file, assigned_object=organisation, role=author_role)\nactor = ios.owner.add_actor(file, actor=user)\nifcopenshell.api.owner.settings.get_user = lambda x: user\nifcopenshell.api.owner.settings.get_application = lambda x: application"
  },
  {
    "objectID": "generation.html#setting-up-the-project-spatial-structure",
    "href": "generation.html#setting-up-the-project-spatial-structure",
    "title": "Step-by-step tutorial",
    "section": "Setting up the project spatial structure",
    "text": "Setting up the project spatial structure\nThat’s how we define an outline of a site 🏘️, containing a building 🏠, which in turn contains a building storey 🛋️:\n\nsite = ios.root.create_entity(file, ifc_class='IfcSite', name=site_name)\nios.aggregate.assign_object(file, product=site, relating_object=project)\n\nbuilding = ios.root.create_entity(file, ifc_class='IfcBuilding', name=building_name)\nios.aggregate.assign_object(file, product=building, relating_object=site)\n\nstorey = ios.root.create_entity(file, ifc_class='IfcBuildingStorey', name=storey_name)\nios.aggregate.assign_object(file, product=storey, relating_object=building);\n\nProperty Sets ✍️ can be easily added with pset.add_pset and pset_edit_pset. Here, we set the total area of the site to 20x20 = 400 m2.\n\npset_site_common = ios.pset.add_pset(file, product=site, name='Pset_SiteCommon')\nios.pset.edit_pset(file, pset=pset_site_common, properties={'TotalArea': 400.})"
  },
  {
    "objectID": "generation.html#creating-our-first-wall",
    "href": "generation.html#creating-our-first-wall",
    "title": "Step-by-step tutorial",
    "section": "Creating our first wall",
    "text": "Creating our first wall\nThe following statement will create a brand new wall entity 🧱🧱 within our IFC file 📁:\n\nsouth_wall = ios.root.create_entity(file, ifc_class='IfcWall', name='South wall', predefined_type='SOLIDWALL')\n\nAs expected, IfcOpenShell 🐚 is tightly coupled to the underlying IFC Schema. Hence, opening a browser tab with the IFC official documentation is not at all a bad idea when using it.\n\nPRO TIP 👉 IFC4X3 docs are far better than previous versions!\n\nDon’t be scared of the bSI documentation! 👻 If you’ve reached this point already, you’re very close to turbocharge 🚀 your IfcOpenShell coding skills 👩🏽‍💻 by relying on the underlying IFC schema.\nIn order to better illustrate it with our new wall 🧱🧱, let’s consider the following. If we want to know among which predefined types we can choose for a certain IfcWall, going to its documentation page, scrolling to “Predefined Type”, and clicking into IfcWallTypeEnum will give us the appropriate list: MOVABLE, PARAPET, PARTITIONING, PLUMBINGWALL, RETAININGWALL, SHEAR, SOLIDWALL and WAVEWALL.\nClearly, our traditional structural wall for the house needs to be classified as a SOLIDWALL. As always in IFC, a predefined type could also be set as USERDEFINED if none of the enumeration options fits our use case, in which case we could monkey-patch 🐵 the type as south_wall.ObjectType = 'CUSTOM TYPE'.\nThe previous kind of reasoning and consulting of the documentation is to be followed for the rest of this notebook. In case that at some point we needed to know which IFC class a certain IfcOpenShell 🐚 entity corresponds to (so as to know where in the IFC documentation to look at), the is_a() method will give us the answer:\n\nsouth_wall.is_a()\n\n'IfcWall'\n\n\nThis notebook environment 📒 highly encourages experimentation 👨‍🔬, like in the statement above. Feel free to add a new cell at any point to further explore the newly created variables. Another very useful method is get_info(), which returns a dictionary with all the entity attributes:\n\nsouth_wall.get_info()\n\n{'id': 41,\n 'type': 'IfcWall',\n 'GlobalId': '1LXtQ1Bub30gLlLbSNcmg8',\n 'OwnerHistory': #40=IfcOwnerHistory(#19,#16,.READWRITE.,.ADDED.,1695242677,#19,#16,1695242677),\n 'Name': 'South wall',\n 'Description': None,\n 'ObjectType': None,\n 'ObjectPlacement': None,\n 'Representation': None,\n 'Tag': None,\n 'PredefinedType': 'SOLIDWALL'}\n\n\nAs seen previously with user defined types, entity attributes can be easily monkey-patched 🐵 (we’re in Python after all! 🐍). It will work if the attribute exists in the corresponding IFC Schema. For instance, if we wanted to set the “Description” of our wall, we would do it as follows:\n\nsouth_wall.Description = 'This is my first wall with the IfcOpenShell Python API!'\n\nIn any case, the IfcOpenShell Python API 🐚 takes care of most low level tasks. Actions like the generation of global IDs, the assignment of owner history to entities or the setup of entity relationships for geometric representations or placements are already dealt with automatically 👌🏻.\nNow, let’s assign the wall to the ground floor storey by means of spatial.assign_container:\n\nios.spatial.assign_container(file, product=south_wall, relating_structure=storey);\n\nIt’s important to keep in mind the IFC distinction between geometry and semantics. Up to now, we’ve created an IfcWall entity 🧱🧱, only containing a name and a predefined type. However, the geometric representations of the actual wall will exist within their own IfcShapeRepresentation entity 🗿. That is to say, one thing is the creation of the IfcWall, but then its geometry needs to be created as a separate IFC class, which in turn will be linked to the former.\nThe API call geometry.add_wall_representation generates a swept solid (IfcExtrudedAreaSolid), an implicit geometry representation which requires less memory 🪶 than explicit BREPS or tesselated representations. You should know that IFC supports all of them 🚀, among other fancy paradigms like Constructive Solid Geometry or BSplines. All in all, for the typical walls/slabs or beams/columns typically used in the AEC field, an IfcExtrudedAreaSolid is difficult to beat, and that’s why the IfcOpenShell API 🐚 defaults to it. You don’t necessarily need to be aware of the low level definition of a wall geometry, but just let the library do the job for you 😎.\n\nsouth_wall_representation = ios.geometry.add_wall_representation(\n    file, context=body, length=storey_size.x + 2 * wall_thickness, height=storey_size.z, \n    thickness=wall_thickness\n)\nios.geometry.assign_representation(file, product=south_wall, representation=south_wall_representation)\nios.geometry.edit_object_placement(\n    file, product=south_wall, matrix=placement_matrix(\n        [-storey_size.x / 2 - wall_thickness, -wall_thickness / 2, 0.]\n    )\n);  #q4: why a matrix if Y is going to be ignored? why not just pass the placement coords + optionals x_local, z_local and scale?\n\nPlacements are assigned to a product (IfcProduct), which in IFC is anything existing within the physical space 🛰️, like a wall, but also an annotation or a spatial element.\nNow, let’s add a surface style in order to assign a colour to the wall representation. If eager to learn more about styles and colour in IFC, there’s an in-depth explanation by Dion Moult in this link, highly recommended 🔝. Alternatively, you may also check out the API docs.\n\nwall_style = ios.style.add_style(file)\nios.style.add_surface_style(\n    file, style=wall_style, ifc_class='IfcSurfaceStyleShading', attributes=wall_colour.info\n)\nios.style.assign_representation_styles(\n    file, shape_representation=south_wall_representation, styles=[wall_style]\n);"
  },
  {
    "objectID": "generation.html#creating-a-footing",
    "href": "generation.html#creating-a-footing",
    "title": "Step-by-step tutorial",
    "section": "Creating a footing",
    "text": "Creating a footing\nLet’s repeat the same process again 🔁 to create the structural footing 🦶. Creation of the element entity (an IfcElement is just a tangible IfcProduct, like a wall or a footing, but not an annotation or an IfcBuildingStorey), assignation of the storey, creation of the swept solid representation, linkage 🔗 to the element, setting of the placement and addition of a surface style:\n\nfooting = ios.root.create_entity(file, ifc_class='IfcFooting', name='Footing', predefined_type='STRIP_FOOTING')\nios.spatial.assign_container(file, product=footing, relating_structure=storey)\nfooting_representation = ios.geometry.add_wall_representation(\n    file, context=body, length=footing_size.x, height=footing_size.z, thickness=footing_size.y\n)\nios.geometry.assign_representation(file, product=footing, representation=footing_representation)\nios.geometry.edit_object_placement(\n    file, product=footing, matrix=placement_matrix(\n        [-footing_size.x/2, -wall_thickness/2 - footing_ledge, -footing_size.z]\n    )\n)\nfooting_style = ios.style.add_style(file)\nios.style.add_surface_style(\n    file, style=footing_style, ifc_class='IfcSurfaceStyleShading', attributes=footing_colour.info\n)\nios.style.assign_representation_styles(\n    file, shape_representation=footing_representation, styles=[footing_style]\n);"
  },
  {
    "objectID": "generation.html#voiding-the-walls-with-window-openings",
    "href": "generation.html#voiding-the-walls-with-window-openings",
    "title": "Step-by-step tutorial",
    "section": "Voiding the walls with window openings",
    "text": "Voiding the walls with window openings\nThe IfcOpenShell API 🐚 also provides utilities to void elements 🕳️. An IFC representation is needed, which will correspond to an opening that will void another element. It is important to note that in accordance with the schema specs, each opening can only void one single element.\nWhen defining the geometric representation of the voids, it is advisable to make them deeper than the element they’re voiding (along its perpendicular axis). If they measured exactly the same, computer intrinsic floating point error could leave a thin layer without voiding 🙅‍♂️.\n\nwest_void_margin = 0.5\nwest_opening = ios.root.create_entity(file, ifc_class='IfcOpeningElement')\nwest_opening_width = 2 * single_window_params['overall_width']\nwo_representation = ios.geometry.add_wall_representation(\n    file, context=body, \n    length=triple_window_params['overall_width'] + west_void_margin, \n    height=triple_window_params['overall_height'],\n    thickness=west_opening_width\n)\nios.geometry.assign_representation(file, product=west_opening, representation=wo_representation)\nwest_opening_coords = [\n    (\n        -storey_size.x / 2 - wall_thickness - west_void_margin \n        + single_window_params['lining_properties']['LiningOffset']\n    ), \n    (\n        -west_opening_width / 2 - wall_thickness / 3\n        + triple_window_params['lining_properties']['LiningOffset'] \n        + triple_window_params['lining_properties']['LiningDepth']\n    ), \n    window_base_height\n]\nios.geometry.edit_object_placement(\n    file, product=west_opening, matrix=placement_matrix(west_opening_coords)\n)\nios.void.add_opening(file, opening=west_opening, element=south_wall)\n\nsouth_opening = ios.root.create_entity(file, ifc_class='IfcOpeningElement')\nsouth_opening_width = 3.\nso_representation = ios.geometry.add_wall_representation(\n    file, context=body, length=single_window_params['overall_width'], \n    height=single_window_params['overall_height'], thickness=south_opening_width\n)\nios.geometry.assign_representation(file, product=south_opening, representation=so_representation)\nios.geometry.edit_object_placement(\n    file, product=south_opening, matrix=placement_matrix(\n        [right_window_horizontal_offset, -south_opening_width / 2, window_base_height]\n    )\n)\nios.void.add_opening(file, opening=south_opening, element=south_wall);"
  },
  {
    "objectID": "generation.html#creating-the-roof",
    "href": "generation.html#creating-the-roof",
    "title": "Step-by-step tutorial",
    "section": "Creating the roof",
    "text": "Creating the roof\nThe gable roof 🛖 consists of two slabs, which will be aggregated into the roof entity. Since both slabs are identical, except for rotation and mirroring operations 🪞, their IfcSlab entities will point to identical representations, though with different placements. These representations will be again an IfcExtrudedAreaSolid, created by add_wall_representation, but in this case the extruded direction will be at a certain angle. That way, the slab prism won’t have its faces perpendicular to each other, which better suits a gable roof geometry.\nLocal axes are set by the calls to geometry.edit_object_placement, with a local Z equivalent to global Y. That effectively rotates the representation by 90º so that its previously horizontal “base” and “top” now become vertical. Lastly, north-side slab is also mirrored along the X axis, so that both slabs are facing each other and the gable roof is successfully constructed 👌🏻.\n\nroof = ios.root.create_entity(file, ifc_class='IfcRoof', name='Roof', predefined_type='GABLE_ROOF')\nios.spatial.assign_container(file, product=roof, relating_structure=storey)\nroof_representation_south = ios.geometry.add_wall_representation(\n    file, context=body, length=roof_size.x, height=roof_size.y / 2, thickness=roof_thickness, \n    x_angle=(roof_angle) * np.pi / 180\n)\nroof_representation_north = ifcopenshell.util.element.copy_deep(file, roof_representation_south)\n#q5: add_slab_representation doesn't accept width and depth? isn't it strange calling it add_wall\n#if we're using it for everything? do \"add_wall_representation\", \"add_slab_representation\" and \n#\"add_profile_representation\" add all of them an IfcExtrudedAreaSolid? Would it make any sense to \n#add a single \"add_extruded_representation\" instead? As a higher level API call than shape_builder\n\nroof_downward_offset = (roof_ledge.y + wall_thickness / 2) * np.tan(roof_angle * np.pi / 180)\n\nsouth_roof = ios.root.create_entity(file, ifc_class='IfcSlab', name='South roof', predefined_type='ROOF')\nios.geometry.assign_representation(file, product=south_roof, representation=roof_representation_south)\nios.geometry.edit_object_placement(\n    file, product=south_roof, matrix=placement_matrix(\n        [roof_size.x / 2, -roof_ledge.y - wall_thickness / 2, storey_size.z - roof_downward_offset], \n        x_local=[-1., 0., 0.], z_local=[0., 1., 0.]\n    )\n)\n\nnorth_roof = ios.root.create_entity(file, ifc_class='IfcSlab', name='North roof', predefined_type='ROOF')\nios.geometry.assign_representation(file, product=north_roof, representation=roof_representation_north)\nios.geometry.edit_object_placement(\n    file, product=north_roof, matrix=placement_matrix(\n        [\n            -roof_size.x / 2, \n            (storey_size.y + wall_thickness) / 2, \n            storey_size.z - roof_downward_offset + roof_size.z + roof_thickness / roof_angle_cos\n        ], x_local=[1., 0., 0.], z_local=[0., 1., 0.]\n    )\n)\n\nios.aggregate.assign_object(file, product=south_roof, relating_object=roof)\nios.aggregate.assign_object(file, product=north_roof, relating_object=roof)\n\nroof_style = ios.style.add_style(file)\nios.style.add_surface_style(\n    file, style=roof_style, ifc_class='IfcSurfaceStyleShading', attributes=roof_colour.info\n)\nios.style.assign_representation_styles(\n    file, shape_representation=roof_representation_south, styles=[roof_style]\n)\nios.style.assign_representation_styles(\n    file, shape_representation=roof_representation_north, styles=[roof_style]\n);"
  },
  {
    "objectID": "generation.html#creating-the-remaining-walls",
    "href": "generation.html#creating-the-remaining-walls",
    "title": "Step-by-step tutorial",
    "section": "Creating the remaining walls",
    "text": "Creating the remaining walls\nSince both geometries are identical, we can duplicate the existing south wall representation into a new northern side wall 🧱🧱. Again, the placement will position the new representation in the relevant coordinates.\n\nnorth_wall_representation = ifcopenshell.util.element.copy_deep(file, south_wall_representation)\nnorth_wall = ios.root.create_entity(file, ifc_class='IfcWall', name='North wall', predefined_type='SOLIDWALL')\nios.spatial.assign_container(file, product=north_wall, relating_structure=storey)\nios.geometry.assign_representation(file, product=north_wall, representation=north_wall_representation)\nios.geometry.edit_object_placement(\n    file, product=north_wall, matrix=placement_matrix(\n        [-storey_size.x/2 - wall_thickness, storey_size.y + wall_thickness / 2, 0.]\n    )\n)\nios.style.assign_representation_styles(\n    file, shape_representation=north_wall_representation, styles=[wall_style]\n);\n\nA new east wall entity is added, along with its representation. This time, though, the geometry is not just an extruded rectangle, but due to the gable roof shape, a pair of clipping operations 🖇️ need to be performed on top. The IfcOpenShell API 🐚 easily allows us to do so by passing some planes with the clippings argument to add_wall_representation.\n\neast_wall = ios.root.create_entity(\n    file, ifc_class='IfcWall', name='East wall', predefined_type='SOLIDWALL'\n)\nios.spatial.assign_container(file, product=east_wall, relating_structure=storey)\n\nsouth_roof_clipping = clipping(\n    [0., wall_thickness / 2, storey_size.z], x_dir=[1., 0., 0.], \n    z_dir=[0., -roof_angle_sin, roof_angle_cos]\n)\nnorth_roof_clipping = clipping(\n    [0., storey_size.y + 3 / 2 * wall_thickness, storey_size.z], x_dir=[1., 0., 0.], \n    z_dir=[0., roof_angle_sin, roof_angle_cos]\n)\n\neast_wall_representation = ios.geometry.add_wall_representation(\n    file, context=body, length=wall_thickness, height=storey_size.z + roof_size.z, \n    thickness=storey_size.y + 2 * wall_thickness, clippings=[south_roof_clipping, north_roof_clipping]\n)\n\nios.geometry.assign_representation(file, product=east_wall, representation=east_wall_representation)\nios.geometry.edit_object_placement(\n    file, product=east_wall, matrix=placement_matrix([storey_size.x / 2, -wall_thickness / 2, 0.])\n)\n\nios.style.assign_representation_styles(\n    file, shape_representation=east_wall_representation, styles=[wall_style]\n);\n\nThe methodology of duplicating a representation is is once more time 🔁 followed for the remaining wall, and an opening 🕳️ is defined on it. Analogously, the opening is exactly equal to the previously defined west_opening. However, since in IFC, an opening can only be used to create a single void within a single element, a new identical opening entity is created.\n\nwest_wall = ios.root.create_entity(\n    file, ifc_class='IfcWall', name='West wall', predefined_type='SOLIDWALL'\n)\nios.spatial.assign_container(file, product=west_wall, relating_structure=storey)\n\nwest_wall_representation = ifcopenshell.util.element.copy_deep(file, east_wall_representation)\nios.geometry.assign_representation(file, product=west_wall, representation=west_wall_representation)\nios.geometry.edit_object_placement(\n    file, product=west_wall, matrix=placement_matrix(\n        [-storey_size.x / 2 - wall_thickness, -wall_thickness / 2, 0.]\n    )\n)\n\nwest_opening_copy = ifcopenshell.util.element.copy_deep(file, west_opening)\nios.geometry.edit_object_placement(\n    file, product=west_opening_copy, matrix=placement_matrix(west_opening_coords)\n)\nios.void.add_opening(file, opening=west_opening_copy, element=west_wall)\n\nios.style.assign_representation_styles(\n    file, shape_representation=west_wall_representation, styles=[wall_style]\n);\n\nWe also indicate that walls 🧱🧱 are connected 🔗 between each other by means of geometry.connect_path.\n\nconnection_args = {'relating_connection': 'ATEND', 'related_connection': 'ATSTART'}\n\nrel_connect_paths = [\n    ios.geometry.connect_path(\n        file, relating_element=south_wall, related_element=east_wall, **connection_args\n    ),\n    ios.geometry.connect_path(\n        file, relating_element=east_wall, related_element=north_wall, **connection_args\n    ),\n    ios.geometry.connect_path(\n        file, relating_element=north_wall, related_element=west_wall, **connection_args\n    ),\n    ios.geometry.connect_path(\n        file, relating_element=west_wall, related_element=south_wall, **connection_args\n    )\n]\n\n#q7: do IfcRelConnectsPathElements with ConnectionGeometry work in any viewer? is this done like this?\n# Original IfcOpenHouse had half a wall thickness less of extension per wall end, I bet it's better for\n# qto's, but how is the way to properly make connections and to have a proper viz of them in IFC?\npoint_list = file.create_entity('IfcCartesianPointList2D', CoordList = [[-1., -1.], [1., 1.]])\ncurve_on_relating = file.create_entity('IfcIndexedPolyCurve', Points=point_list)\nconnection_curve = file.create_entity(\n    'IfcConnectionCurveGeometry', CurveOnRelatingElement=curve_on_relating\n)\n\nfor path in rel_connect_paths:\n    path.ConnectionGeometry = connection_curve"
  },
  {
    "objectID": "generation.html#creating-the-terrain-as-a-nurbs-surface",
    "href": "generation.html#creating-the-terrain-as-a-nurbs-surface",
    "title": "Step-by-step tutorial",
    "section": "Creating the terrain as a NURBS surface",
    "text": "Creating the terrain as a NURBS surface\nThis section reproduces the terrain of the original IfcOpenHouse 🏡, defined by a NURBS surface ⛰️. The variable terrain_build_method can be set to one of three enum values:\n\nTerrainBuildMethod.NATIVE_BSPLINE: Uses an advanced BREP with the native IfcBSplineSurfaceWithKnots entity, existing from IFC4 onwards.\nTerrainBuildMethod.TESSELATE_OCC_SHAPE: Constructs the shape in Open Cascade and tesselate it with the help of IfcOpenShell 🐚.\nTerrainBuildMethod.NONE: You may also safely skip the terrain part.\n\nThe terrain with a fancy NURBS surface may be challenging to be correctly displayed within some IFC viewers. On the other hand, the tesselation method was followed on the original IfcOpenHouse for IFC2x3, but note that it requires the installation of Open Cascade (pythonocc-core package 📦). In case you want to check out how exactly these methods work, refer to the ios_utils module, but be advised they are quite complex!\n\nCURIOUS NOTE 👉 The tesselation method will create an IfcOpenShell entity with the IfcOpenShell library! 🐚🐚🐚\nPRO TIP 👉 If overwhelmed, you may just choose NONE and skip this fancy terrain section, since it’s the least connected with real use cases in the industry.\n\n\nterrain_control_points = [  # obtained from the original IfcOpenHouse\n    [( -10., -10., -4.13), ( -10., -4.33, -4.13), (-10., 0., -5.13), ( -10., 4.33, -7.13), ( -10., 10., -7.13)],\n    [(-3.33, -10., -5.13), (-7.67, -3.67,    5.), ( -9., 0.,    1.), (-7.67, 7.67,    6.), (-3.33, 10., -4.13)],\n    [(   0., -10., -5.53), (   0., -3.67,    3.), (  0., 0.,  -12.), (   0., 7.67,   1.5), (   0., 10., -4.13)],\n    [( 3.33, -10., -6.13), ( 7.67, -3.67,    6.), (  9., 0.,    5.), ( 7.67,   9.,    7.), ( 3.33, 10., -4.13)],\n    [(  10., -10., -6.13), (  10., -4.33, -5.13), ( 10., 0., -4.13), (  10., 4.33, -4.13), (  10., 10., -8.13)]\n]\n\ndegree, multiplicity = 4, 5\n\nif terrain_build_method == TerrainBuildMethod.NATIVE_BSPLINE:\n    terrain_representation = build_native_bspline_terrain(\n        file, body, terrain_control_points, degree, multiplicity\n    )\n    \nelif terrain_build_method == TerrainBuildMethod.TESSELATE_OCC_SHAPE:\n    deflection = 0.01\n    terrain_representation = build_tesselated_occ_terrain(\n        file, body, terrain_control_points, degree, multiplicity, deflection\n    )\n\nif terrain_build_method != TerrainBuildMethod.NONE:\n    # If we have produced an IfcShapeRepresentation, by any of the previous methods, we assign it\n    # to the IfcSite and also assign it a style.\n    \n    ios.geometry.assign_representation(file, product=site, representation=terrain_representation)\n    terrain_style = ios.style.add_style(file)\n    ios.style.add_surface_style(\n        file, style=terrain_style, ifc_class='IfcSurfaceStyleShading', attributes=terrain_colour.info\n    )\n    ios.style.assign_representation_styles(\n        file, shape_representation=terrain_representation, styles=[terrain_style]\n    );"
  },
  {
    "objectID": "generation.html#creation-of-material-layer-sets",
    "href": "generation.html#creation-of-material-layer-sets",
    "title": "Step-by-step tutorial",
    "section": "Creation of material layer sets",
    "text": "Creation of material layer sets\nFirstly, an IfcMaterialLayerSet is added, with a unique brick layer 🧱 consisting of a newly defined brick material for the entire wall thickness. If there were walls consisting of more layers, they could be simply added with the help of material.add_layer. Then, this new layer set is assigned to each wall.\n\nbrick = ios.material.add_material(file, name='Brick', category='brick')\nwall_layerset = ios.material.add_material_set(file, name='Wall', set_type='IfcMaterialLayerSet')\nbrick_layer = ios.material.add_layer(file, layer_set=wall_layerset, material=brick)\nios.material.edit_layer(file, layer=brick_layer, attributes={'LayerThickness': wall_thickness})\n\n#q9: Original IfcOpenHouse used usages. In current IFC, are usages without types a good idea? \n# Do I add usages or types?\n\nfor wall in [south_wall, north_wall, east_wall, west_wall]:\n    ios.material.assign_material(file, product=wall, type='IfcMaterialLayerSet', material=wall_layerset)"
  },
  {
    "objectID": "generation.html#creation-of-a-stair-flight",
    "href": "generation.html#creation-of-a-stair-flight",
    "title": "Step-by-step tutorial",
    "section": "Creation of a stair flight",
    "text": "Creation of a stair flight\nSimilarly to the previously created entities, a new IfcStairFlight is created 🪜, in this case with an extruded profile representation.\n\nstair_flight_params = {'NumberOfRisers': 2, 'NumberOfTreads': 2, 'RiserHeight': 0.2, 'TreadLength': 0.25}\nstair_flight = ios.root.create_entity(file, ifc_class='IfcStairFlight', name='Main entrance stair', predefined_type='STRAIGHT')\nios.spatial.assign_container(file, product=stair_flight, relating_structure=storey)\nfor attr, value in stair_flight_params.items():\n    setattr(stair_flight, attr, value)  # the entity is monkey-patched with its IFC compliant attributes\n\nstair_points = []  # Staircase cross-sectional profile 2D points\nfor step in range(stair_flight_params['NumberOfRisers'] + 1):\n    next_step = 0 if step == stair_flight_params['NumberOfRisers'] else step + 1\n    stair_points.extend([\n        (step * stair_flight_params['TreadLength'], step * stair_flight_params['RiserHeight']),\n        (next_step * stair_flight_params['TreadLength'], step * stair_flight_params['RiserHeight']),\n    ])\n\nstair_flight_curve = file.create_entity(\n    'IfcIndexedPolyCurve', file.create_entity('IfcCartesianPointList2D', stair_points), None, False\n)\nstair_flight_profile = file.create_entity('IfcArbitraryClosedProfileDef', 'AREA', None, stair_flight_curve)\nstair_flight_representation = ios.geometry.add_profile_representation(\n    file, context=body, profile=stair_flight_profile, depth=stair_width\n)\n\nios.geometry.assign_representation(file, product=stair_flight, representation=stair_flight_representation)\nios.geometry.edit_object_placement(\n    file, product=stair_flight, matrix=placement_matrix(\n        [footing_size.x / 2, door_horizontal_offset + (door_params['overall_width'] - stair_width) / 2, 0.],\n        z_local=[0., 1., 0.]\n    )\n)\n\nstair_style = ios.style.add_style(file)\nios.style.add_surface_style(\n    file, style=stair_style, ifc_class='IfcSurfaceStyleShading', attributes=stair_colour.info\n)\nios.style.assign_representation_styles(\n    file, shape_representation=stair_flight_representation, styles=[stair_style]\n);"
  },
  {
    "objectID": "generation.html#the-house-needs-a-door",
    "href": "generation.html#the-house-needs-a-door",
    "title": "Step-by-step tutorial",
    "section": "The house needs a door…",
    "text": "The house needs a door…\nFor the door 🚪 creation, we can rely on geometry.add_door_representation, which will produce a high quality representation and is highly customizable.\nNote that when this API function is used outside of Blender, it requires the mathutils package to be installed within the Python environment.\n\ndoor = ios.root.create_entity(file, ifc_class='IfcDoor', name='Main door', predefined_type='DOOR')\nios.spatial.assign_container(file, product=door, relating_structure=storey)\n\ndoor_opening = ios.root.create_entity(file, ifc_class='IfcOpeningElement')\ndoor_opening_representation = ios.geometry.add_wall_representation(\n    file, context=body, length=door_params['overall_width'], height=door_params['overall_height'], \n    thickness=door_params['overall_width']\n)\nios.geometry.assign_representation(\n    file, product=door_opening, representation=door_opening_representation\n)\nios.geometry.edit_object_placement(\n    file, product=door_opening, matrix=placement_matrix(\n        [storey_size.x / 2 - door_params['overall_width'] / 2 , door_horizontal_offset, 0.]\n    )\n)\nios.void.add_opening(file, opening=door_opening, element=east_wall)\n\ndoor_representation = ios.geometry.add_door_representation(  # requires mathutils\n    file, context=body, **door_params\n)\nios.geometry.edit_object_placement(\n    file, product=door, matrix=placement_matrix(\n        [storey_size.x / 2 + wall_thickness / 4, door_horizontal_offset, 0.],\n        x_local=[0., 1., 0.]  # door is rotated into the east wall\n    )\n)\nios.geometry.assign_representation(file, product=door, representation=door_representation)\nios.void.add_filling(file, opening=door_opening, element=door)\n\ndoor_style = ios.style.add_style(file)\nios.style.add_surface_style(\n    file, style=door_style, ifc_class='IfcSurfaceStyleShading', attributes=door_colour.info\n)\nios.style.assign_representation_styles(\n    file, shape_representation=door_representation, styles=[door_style]\n);"
  },
  {
    "objectID": "generation.html#and-some-windows",
    "href": "generation.html#and-some-windows",
    "title": "Step-by-step tutorial",
    "section": "… and some windows",
    "text": "… and some windows\nWindow representations 🪟 rely on the geometry.add_window_representation call, which is also highly customizable. It also depends on the mathutils package.\n\nwindow_right = ios.root.create_entity(\n    file, ifc_class='IfcWindow', name='Right window', predefined_type='WINDOW'\n)\nwindow_right.PartitioningType = single_window_params['partition_type']  #q6: couldn't this fit into the previous call?\nwindow_right_representation = ios.geometry.add_window_representation(  # requires mathutils\n    file, context=body, **single_window_params\n)\nios.spatial.assign_container(file, product=window_right, relating_structure=storey)\nios.geometry.edit_object_placement(\n    file, product=window_right, matrix=placement_matrix(\n        [right_window_horizontal_offset, -wall_thickness / 3, window_base_height]\n    )\n)\nios.geometry.assign_representation(\n    file, product=window_right, representation=window_right_representation\n)\nios.void.add_filling(file, opening=south_opening, element=window_right)\n\nwindow_west = ios.root.create_entity(\n    file, ifc_class='IfcWindow', name='West window', predefined_type='WINDOW'\n)\nwindow_west.PartitioningType = single_window_params['partition_type']\nwindow_west_representation = ios.geometry.add_window_representation(\n    file, context=body, **single_window_params\n)\nios.spatial.assign_container(file, product=window_west, relating_structure=storey)\nios.geometry.edit_object_placement(\n    file, product=window_west, matrix=placement_matrix(\n        [\n            -storey_size.x / 2 - wall_thickness,\n            (\n                + single_window_params['overall_width'] - wall_thickness / 3 \n                + triple_window_params['lining_properties']['LiningOffset'] \n                + triple_window_params['lining_properties']['LiningDepth']\n            ), \n            window_base_height\n        ], x_local=[0., -1., 0.]\n    )\n)\nios.geometry.assign_representation(\n    file, product=window_west, representation=window_west_representation\n)\nios.void.add_filling(file, opening=west_opening_copy, element=window_west)\n\nwindow_left = ios.root.create_entity(\n    file, ifc_class='IfcWindow', name='Left Window', predefined_type='WINDOW'\n)\nwindow_left.PartitioningType = triple_window_params['partition_type']\nwindow_left_representation = ios.geometry.add_window_representation(\n    file, context=body, **triple_window_params\n)\nios.spatial.assign_container(file, product=window_left, relating_structure=storey)\nios.geometry.edit_object_placement(\n    file, product=window_left, matrix=placement_matrix(\n        [\n            (\n                -storey_size.x / 2 - wall_thickness\n                + single_window_params['lining_properties']['LiningOffset']\n            ),\n            -wall_thickness / 3,\n            window_base_height]\n    )\n)\nios.geometry.assign_representation(\n    file, product=window_left, representation=window_left_representation\n)\nios.void.add_filling(file, opening=west_opening, element=window_left)\n\nwindow_style = ios.style.add_style(file)\nios.style.add_surface_style(\n    file, style=window_style, ifc_class='IfcSurfaceStyleShading', attributes=window_colour.info\n)\nios.style.assign_representation_styles( #q10: Will it be possible to assign different styles to the panel and the lining?\n    file, shape_representation=window_right_representation, styles=[window_style]\n)\nios.style.assign_representation_styles(\n    file, shape_representation=window_west_representation, styles=[window_style]\n)\nios.style.assign_representation_styles(\n    file, shape_representation=window_left_representation, styles=[window_style]\n);"
  },
  {
    "objectID": "generation.html#checking-the-validity-of-our-file",
    "href": "generation.html#checking-the-validity-of-our-file",
    "title": "Step-by-step tutorial",
    "section": "Checking the validity of our file",
    "text": "Checking the validity of our file\nAfter all the previous steps, we have programmatically defined an IFC file. But, is it valid? ✅ have we messed up at some point? IfcOpenShell 🐚 provides the validate method to validate a certain file against its corresponding schema:\n\njson_logger = ifcopenshell.validate.json_logger()\nifcopenshell.validate.validate(file, json_logger)\njson_logger.statements[:min(3, len(json_logger.statements))]  # Showing only first 3 here\n\n[]\n\n\nLet’s check how many different validation issues we get by converting to a Python 🐍 set. If everything is fine, the set should be empty:\n\nset([issue['attribute'] for issue in json_logger.statements])\n\nset()"
  },
  {
    "objectID": "generation.html#visualization-with-ifc.js",
    "href": "generation.html#visualization-with-ifc.js",
    "title": "Step-by-step tutorial",
    "section": "Visualization with IFC.js",
    "text": "Visualization with IFC.js\nIt is worth noting that a Jupyter 🪐 Notebook 📒 runs in the browser 🛜, and is therefore subject to the laws of web development. Moreover, a couple of handy “magic methods” %%html and %%js can be placed at the start of a code cell to run HTML or JavaScript. Thanks to it, we can create a new div and use a simple prebundled script using IFC.js to render our brand new IFC on it. You may have a look at the simple JS script here.\n\n&lt;div class=\"info-panel hidden\" id=\"id-info-div\"&gt;\n    &lt;p class=\"info\" id=\"id-info-p\"&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div id=\"ifcjs-container\"&gt;&lt;/div&gt;\n\n\n    \n\n\n\n\n\n//# Run this cell to load the IfcOpenShell file with IFC.js in the div above\n//# Rerun cells as needed and run this cell again to reload viz\n\nasync function loadIfcFromJupyter(out){\n    let ifcStr = out.content.data[\"text/plain\"];\n    loadIfc(ifcStr, true);\n}\n\nlet callbacks = {iopub: {output: loadIfcFromJupyter}};\nIPython.notebook.kernel.execute(\"file.to_string()\", callbacks, {silent: false});\n\n\n\n\nIf browsing through the website version, the preview has been already shown at the top of the page. Do you fancy trying with a 60º roof? or taller walls? Check out the notebook version in order to be able to produce those modified versions by yourself 😉.\n \n\n\n\nIfcOpenHouse generation samples"
  },
  {
    "objectID": "generation.html#saving-our-ifc-file",
    "href": "generation.html#saving-our-ifc-file",
    "title": "Step-by-step tutorial",
    "section": "Saving our IFC file",
    "text": "Saving our IFC file\nFinally, we can dump the programmatically generated file into disk 🚀:\n\nifc_path = Path('..') / 'ifc' / 'IfcOpenHouse.ifc'\nfile.write(ifc_path)\n\nAnd that was it! we have programmatically and procedurally generated a simple house in IFC. What are you thinking to build next? 😎"
  },
  {
    "objectID": "generation.html#known-missing-features",
    "href": "generation.html#known-missing-features",
    "title": "Step-by-step tutorial",
    "section": "Known missing features",
    "text": "Known missing features\nIf you feel something is missing or can be improve, kindly file an issue. This is a list of known missing features at the moment:\n\nUsing IFC Types"
  }
]